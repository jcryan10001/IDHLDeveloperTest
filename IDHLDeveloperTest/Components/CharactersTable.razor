@page "/CharactersTable"
@inherits OwningComponentBase
@using IDHLDeveloperTest.Models
@using IDHLDeveloperTest.Services
@using System.Text.Json
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>All Disney Characters</h3>
<div style="padding: 10px;">
    <div class="form-group">
        <input type="text" class="form-control" placeholder="Search by name" @bind-value="searchString">
    </div>
    <div class="form-group">
        <label for="pageSize">Results per page:</label>
        <select class="form-control" id="pageSize" @bind="BatchSizeString"  @oninput="RefreshPage">
            <option value="10">10</option>
            <option value="25">25</option>
            <option value="50">50</option>
            <option value="100">100</option>
        </select>
    </div>


    <table class="table">
        <thead>
            <tr>
                <th scope="col">Id</th>
                <th scope="col">Name</th>
                <th scope="col">Image</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var character in filteredCharacters)
            {
                <tr>
                    <td>@character._id</td>
                    <td><a href="#" @onclick="@(() => Navigate(character))">@character.name</a></td>
                    <td><img src="@character.imageUrl" style="max-width: 100px; max-height: 100px;"></td>
                </tr>
            }
        </tbody>
    </table>
    <div style="display: flex; justify-content: space-between; margin-top: 10px;">
        <button class="btn btn-primary" @onclick="LoadPreviousPage" disabled="@IsFirstPage()">Previous @BatchSize</button>
        <span>Page @currentPageNumber of @totalPages</span>
        <button class="btn btn-primary" @onclick="LoadNextPage" disabled="@IsLastPage()">Next @BatchSize</button>
    </div>
</div>

@code {
    protected IClientService clientService;
    private CharacterList characterList = new CharacterList();
    private int totalPages = 1;
    private string searchString = "";
    [Parameter]
    public int currentPageNumber { get; set; } = 1;
    [Parameter]
    public int BatchSize { get; set; } = 10;
    public string BatchSizeString { get; set; }

    private List<Character> filteredCharacters => characterList.data.Where(c => c.name.ToLower().Contains(searchString.ToLower())).ToList();

    protected override async Task OnInitializedAsync()
    {
        clientService = (IClientService)ScopedServices.GetService(typeof(IClientService));
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("currentPageNumber", out var pageNumberValue))
        {
            currentPageNumber = int.Parse(pageNumberValue);
        }
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("BatchSize", out var batchsize))
        {
            BatchSize = int.Parse(batchsize);
        }
        await GetDisneyCharacters();
    }

    private async Task RefreshPage(ChangeEventArgs args)
    {;
        BatchSize = int.Parse(args.Value.ToString());
        await GetDisneyCharacters();
        StateHasChanged();
    }
    // This function retrieves the Disney characters from the API.
    public async Task GetDisneyCharacters()
    {
        try
        {
            var response = await clientService.GetCharacters((currentPageNumber - 1) * BatchSize, BatchSize);
            characterList = response.characterList;
            totalPages = characterList.totalPages;
            BatchSize = GetBatchSize();
            BatchSizeString = BatchSize.ToString();
            //StateHasChanged();
        }
        catch(Exception e)
        {
            Console.WriteLine(e);
        }
    }



    private async Task LoadNextPage()
    {
        currentPageNumber++;
        await GetDisneyCharacters();
    }

    private async Task LoadPreviousPage()
    {
        currentPageNumber--;
        await GetDisneyCharacters();
    }

    private bool IsFirstPage()
    {
        return currentPageNumber == 1;
    }

    private bool IsLastPage()
    {
        return currentPageNumber == totalPages;
    }

    // This function navigates to the DisneyCharacterDetails page with the selected character's information
    // serialized in the query string along with the current page number and batch number
    public async Task Navigate(Character character)
    {
        // Serialize the character into JSON format for the query string
        string characterJson = JsonSerializer.Serialize(character);

        // Navigate to the DisneyCharacterDetails page with the character's information and current page/batch numbers
        NavigationManager.NavigateTo($"/character?Character={characterJson}&currentPageNumber={currentPageNumber}&BatchSize={BatchSize}", forceLoad: true);

    }
    private int GetCurrentPageNumber()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("pageNumber", out var pageNumberValue) && int.TryParse(pageNumberValue, out int pageNumber))
        {
            return pageNumber;
        }

        return 1;
    }
    private int GetBatchSize()
    {
        try
        {
            var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
            var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

            if (query.TryGetValue("BatchSize", out var batchSizeValue) && int.TryParse(batchSizeValue, out int batchSize))
            {
                return batchSize;
            }
            else
            {
                return BatchSize;
            }

        }
        catch (Exception e)
        {
            return 10; // Default batch s
        }
    }
}