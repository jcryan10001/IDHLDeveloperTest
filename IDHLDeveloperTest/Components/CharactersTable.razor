@page "/CharactersTable"
@inherits OwningComponentBase
@using IDHLDeveloperTest.Models;
@using IDHLDeveloperTest.Services;
@using System.Text.Json;
@inject NavigationManager NavigationManager;

<h3>All Characters</h3>
<span style="margin: 0 10px;">Page -> @currentPageNumber</span>
<div style="padding: 10px;">
    <div class="form-group">
        <input type="text" class="form-control" placeholder="Search by name" @bind-value="searchString">
    </div>

    <table class="table">
        <thead>
            <tr>
                <th scope="col">Id</th>
                <th scope="col">Name</th>
                <th scope="col">Image</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var character in filteredCharacters)
            {
                <tr>
                    <td>@character._id</td>
                    <td><a href="#" @onclick="@(() => Navigate(character))">@character.name</a></td>
                    <td><img src="@character.imageUrl" style="max-width: 100px; max-height: 100px;"></td>
                </tr>
            }
        </tbody>
    </table>
    <div style="display: flex; justify-content: space-between; margin-top: 10px;">
        <button class="btn btn-primary" @onclick="LoadPreviousPage" disabled="@IsFirstPage()">Previous 50</button>
        <span>Page @currentPageNumber of @totalPages</span>
        <button class="btn btn-primary" @onclick="LoadNextPage" disabled="@IsLastPage()">Next 50</button>
    </div>
</div>

@code {
    protected IClientService clientService;
    private CharacterList characterList = new CharacterList();
    //private int currentPageNumber = 1;
    private int totalPages = 1;
    private string searchString = "";
    [Parameter]
    public int currentPageNumber { get; set; } = 1;


    private List<Character> filteredCharacters => characterList.data.Where(c => c.name.ToLower().Contains(searchString.ToLower())).ToList();

    // This function retrieves the Disney characters from the API.
    public async Task GetDisneyCharacters()
    {
        characterList = await clientService.GetCharacters(currentPageNumber);
        totalPages = characterList.totalPages;

    }
    protected override async Task OnInitializedAsync()
    {
        clientService = (IClientService)ScopedServices.GetService(typeof(IClientService));
        // characterList = await clientService.GetCharacters(currentPageNumber);



        try
        {
            // Try to retrieve the URI of the current page
            var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
            var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

            // Deserialize current page number and current batch number from the query string
            if (query.TryGetValue("pageNumber", out var pageNumberValue))
            {
                currentPageNumber = int.Parse(pageNumberValue);
            }
            await GetDisneyCharacters();
        }
        catch (Exception e)
        {
            // Handle exception
        }
    }

    private async Task LoadNextPage()
    {
        currentPageNumber++;
        characterList = await clientService.GetCharacters(currentPageNumber); 
        StateHasChanged();
    }

    private async Task LoadPreviousPage()
    {
        currentPageNumber--;
        characterList = await clientService.GetCharacters(currentPageNumber); 
        StateHasChanged();
    }
    // This function navigates to the DisneyCharacterDetails page with the selected character's information
    // serialized in the query string along with the current page number and batch number
    public async Task Navigate(Character character)
    {
        // Serialize the character into JSON format for the query string
        string characterJson = JsonSerializer.Serialize(character);

        // Navigate to the DisneyCharacterDetails page with the character's information and current page/batch numbers
        NavigationManager.NavigateTo($"/character?Character={characterJson}&currentPageNumber={currentPageNumber}", forceLoad: true);
    }

private bool IsFirstPage()
{
    return currentPageNumber == 1;
}

private bool IsLastPage()
{
    return currentPageNumber == totalPages;
}

}
