@page "/character"
@inherits OwningComponentBase
@inject NavigationManager NavigationManager
@using IDHLDeveloperTest.Models
@using IDHLDeveloperTest.Services
@using System.Text.Json
@using Microsoft.AspNetCore.WebUtilities

@if (Character == null)
{
    <p>Loading...</p>
}
else
{
    <button class="btn btn-primary" @onclick="GoBack">Go Back</button>
    <h3>@Character.name Details</h3>
    <div style="padding: 10px;">
        <div class="row">
            <div class="col-md-4">
                <img src="@Character.imageUrl" style="max-width: 300px; max-height: 300px;" />
            </div>
            <div class="col-md-8">
                <p><strong>Name:</strong> @Character.name</p>
                <p><strong>Films:</strong></p>
                <ul>
                    @foreach (var film in Character.films)
                    {
                        <li>@film</li>
                    }
                </ul>
                <p><strong>TV Shows:</strong></p>
                <ul>
                    @foreach (var tvShow in Character.tvShows)
                    {
                        <li>@tvShow</li>
                    }
                </ul>
                <p><strong>Video Games:</strong></p>
                <ul>
                    @foreach (var videoGame in Character.videoGames)
                    {
                        <li>@videoGame</li>
                    }
                </ul>
            </div>
        </div>
    </div>
}

@code {

    [Parameter]
    public int currentPageNumber { get; set; }

    [Parameter]
    public int BatchSize { get; set; }

    private Character Character { get; set; }
    private int CharacterID { get; set; }

    protected IClientService clientService;

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("currentPageNumber", out var pageNumberValue))
        {
            currentPageNumber = int.Parse(pageNumberValue);
        }
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("BatchSize", out var batchsize))
        {
            BatchSize = int.Parse(batchsize);
        }
        if (query.TryGetValue("Character", out var characterJson))
        {
            Character = JsonSerializer.Deserialize<Character>(characterJson);
            CharacterID = Character._id;
            await GetDisneyCharacter();
        }
        else
        {
            // Character object is not available in the query string.
            // WE may want to handle this case appropriately.
        }


    }

    // This function retrieves the Disney character from the service.
    public async Task GetDisneyCharacter()
    {
        clientService = (IClientService)ScopedServices.GetService(typeof(IClientService));
        Character = await clientService.GetCharacter(CharacterID);
    }

public async Task GoBack()
{
        NavigationManager.NavigateTo($"/CharactersTable?currentPageNumber={currentPageNumber}&BatchSize={BatchSize}");
}

}
